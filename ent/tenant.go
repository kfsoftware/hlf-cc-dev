// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kfsoftware/hlf-cc-dev/ent/tenant"
)

// Tenant is the model entity for the Tenant schema.
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MspId holds the value of the "mspId" field.
	MspId string `json:"mspId,omitempty"`
	// SignCertCAPrivateKey holds the value of the "signCertCAPrivateKey" field.
	SignCertCAPrivateKey []byte `json:"signCertCAPrivateKey,omitempty"`
	// SignCertCACert holds the value of the "signCertCACert" field.
	SignCertCACert []byte `json:"signCertCACert,omitempty"`
	// TlsCertCAPrivateKey holds the value of the "tlsCertCAPrivateKey" field.
	TlsCertCAPrivateKey []byte `json:"tlsCertCAPrivateKey,omitempty"`
	// TlsCertCACert holds the value of the "tlsCertCACert" field.
	TlsCertCACert []byte `json:"tlsCertCACert,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantQuery when eager-loading is set.
	Edges TenantEdges `json:"edges"`
}

// TenantEdges holds the relations/edges for other nodes in the graph.
type TenantEdges struct {
	// Chaincodes holds the value of the chaincodes edge.
	Chaincodes []*Chaincode `json:"chaincodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChaincodesOrErr returns the Chaincodes value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) ChaincodesOrErr() ([]*Chaincode, error) {
	if e.loadedTypes[0] {
		return e.Chaincodes, nil
	}
	return nil, &NotLoadedError{edge: "chaincodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldSignCertCAPrivateKey, tenant.FieldSignCertCACert, tenant.FieldTlsCertCAPrivateKey, tenant.FieldTlsCertCACert:
			values[i] = new([]byte)
		case tenant.FieldID:
			values[i] = new(sql.NullInt64)
		case tenant.FieldName, tenant.FieldMspId:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tenant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (t *Tenant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tenant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tenant.FieldMspId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mspId", values[i])
			} else if value.Valid {
				t.MspId = value.String
			}
		case tenant.FieldSignCertCAPrivateKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field signCertCAPrivateKey", values[i])
			} else if value != nil {
				t.SignCertCAPrivateKey = *value
			}
		case tenant.FieldSignCertCACert:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field signCertCACert", values[i])
			} else if value != nil {
				t.SignCertCACert = *value
			}
		case tenant.FieldTlsCertCAPrivateKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tlsCertCAPrivateKey", values[i])
			} else if value != nil {
				t.TlsCertCAPrivateKey = *value
			}
		case tenant.FieldTlsCertCACert:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tlsCertCACert", values[i])
			} else if value != nil {
				t.TlsCertCACert = *value
			}
		}
	}
	return nil
}

// QueryChaincodes queries the "chaincodes" edge of the Tenant entity.
func (t *Tenant) QueryChaincodes() *ChaincodeQuery {
	return (&TenantClient{config: t.config}).QueryChaincodes(t)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenant) Update() *TenantUpdateOne {
	return (&TenantClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenant) Unwrap() *Tenant {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tenant is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", mspId=")
	builder.WriteString(t.MspId)
	builder.WriteString(", signCertCAPrivateKey=")
	builder.WriteString(fmt.Sprintf("%v", t.SignCertCAPrivateKey))
	builder.WriteString(", signCertCACert=")
	builder.WriteString(fmt.Sprintf("%v", t.SignCertCACert))
	builder.WriteString(", tlsCertCAPrivateKey=")
	builder.WriteString(fmt.Sprintf("%v", t.TlsCertCAPrivateKey))
	builder.WriteString(", tlsCertCACert=")
	builder.WriteString(fmt.Sprintf("%v", t.TlsCertCACert))
	builder.WriteByte(')')
	return builder.String()
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant

func (t Tenants) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
