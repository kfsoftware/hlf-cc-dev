// Code generated by entc, DO NOT EDIT.

package tenant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kfsoftware/hlf-cc-dev/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// MspId applies equality check predicate on the "mspId" field. It's identical to MspIdEQ.
func MspId(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMspId), v))
	})
}

// SignCertCAPrivateKey applies equality check predicate on the "signCertCAPrivateKey" field. It's identical to SignCertCAPrivateKeyEQ.
func SignCertCAPrivateKey(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCACert applies equality check predicate on the "signCertCACert" field. It's identical to SignCertCACertEQ.
func SignCertCACert(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignCertCACert), v))
	})
}

// TlsCertCAPrivateKey applies equality check predicate on the "tlsCertCAPrivateKey" field. It's identical to TlsCertCAPrivateKeyEQ.
func TlsCertCAPrivateKey(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCACert applies equality check predicate on the "tlsCertCACert" field. It's identical to TlsCertCACertEQ.
func TlsCertCACert(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTlsCertCACert), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// MspIdEQ applies the EQ predicate on the "mspId" field.
func MspIdEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMspId), v))
	})
}

// MspIdNEQ applies the NEQ predicate on the "mspId" field.
func MspIdNEQ(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMspId), v))
	})
}

// MspIdIn applies the In predicate on the "mspId" field.
func MspIdIn(vs ...string) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMspId), v...))
	})
}

// MspIdNotIn applies the NotIn predicate on the "mspId" field.
func MspIdNotIn(vs ...string) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMspId), v...))
	})
}

// MspIdGT applies the GT predicate on the "mspId" field.
func MspIdGT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMspId), v))
	})
}

// MspIdGTE applies the GTE predicate on the "mspId" field.
func MspIdGTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMspId), v))
	})
}

// MspIdLT applies the LT predicate on the "mspId" field.
func MspIdLT(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMspId), v))
	})
}

// MspIdLTE applies the LTE predicate on the "mspId" field.
func MspIdLTE(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMspId), v))
	})
}

// MspIdContains applies the Contains predicate on the "mspId" field.
func MspIdContains(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMspId), v))
	})
}

// MspIdHasPrefix applies the HasPrefix predicate on the "mspId" field.
func MspIdHasPrefix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMspId), v))
	})
}

// MspIdHasSuffix applies the HasSuffix predicate on the "mspId" field.
func MspIdHasSuffix(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMspId), v))
	})
}

// MspIdEqualFold applies the EqualFold predicate on the "mspId" field.
func MspIdEqualFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMspId), v))
	})
}

// MspIdContainsFold applies the ContainsFold predicate on the "mspId" field.
func MspIdContainsFold(v string) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMspId), v))
	})
}

// SignCertCAPrivateKeyEQ applies the EQ predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCAPrivateKeyNEQ applies the NEQ predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyNEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCAPrivateKeyIn applies the In predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSignCertCAPrivateKey), v...))
	})
}

// SignCertCAPrivateKeyNotIn applies the NotIn predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyNotIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSignCertCAPrivateKey), v...))
	})
}

// SignCertCAPrivateKeyGT applies the GT predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyGT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCAPrivateKeyGTE applies the GTE predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyGTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCAPrivateKeyLT applies the LT predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyLT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCAPrivateKeyLTE applies the LTE predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyLTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSignCertCAPrivateKey), v))
	})
}

// SignCertCAPrivateKeyIsNil applies the IsNil predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSignCertCAPrivateKey)))
	})
}

// SignCertCAPrivateKeyNotNil applies the NotNil predicate on the "signCertCAPrivateKey" field.
func SignCertCAPrivateKeyNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSignCertCAPrivateKey)))
	})
}

// SignCertCACertEQ applies the EQ predicate on the "signCertCACert" field.
func SignCertCACertEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSignCertCACert), v))
	})
}

// SignCertCACertNEQ applies the NEQ predicate on the "signCertCACert" field.
func SignCertCACertNEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSignCertCACert), v))
	})
}

// SignCertCACertIn applies the In predicate on the "signCertCACert" field.
func SignCertCACertIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSignCertCACert), v...))
	})
}

// SignCertCACertNotIn applies the NotIn predicate on the "signCertCACert" field.
func SignCertCACertNotIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSignCertCACert), v...))
	})
}

// SignCertCACertGT applies the GT predicate on the "signCertCACert" field.
func SignCertCACertGT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSignCertCACert), v))
	})
}

// SignCertCACertGTE applies the GTE predicate on the "signCertCACert" field.
func SignCertCACertGTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSignCertCACert), v))
	})
}

// SignCertCACertLT applies the LT predicate on the "signCertCACert" field.
func SignCertCACertLT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSignCertCACert), v))
	})
}

// SignCertCACertLTE applies the LTE predicate on the "signCertCACert" field.
func SignCertCACertLTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSignCertCACert), v))
	})
}

// SignCertCACertIsNil applies the IsNil predicate on the "signCertCACert" field.
func SignCertCACertIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSignCertCACert)))
	})
}

// SignCertCACertNotNil applies the NotNil predicate on the "signCertCACert" field.
func SignCertCACertNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSignCertCACert)))
	})
}

// TlsCertCAPrivateKeyEQ applies the EQ predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCAPrivateKeyNEQ applies the NEQ predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyNEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCAPrivateKeyIn applies the In predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTlsCertCAPrivateKey), v...))
	})
}

// TlsCertCAPrivateKeyNotIn applies the NotIn predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyNotIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTlsCertCAPrivateKey), v...))
	})
}

// TlsCertCAPrivateKeyGT applies the GT predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyGT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCAPrivateKeyGTE applies the GTE predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyGTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCAPrivateKeyLT applies the LT predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyLT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCAPrivateKeyLTE applies the LTE predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyLTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTlsCertCAPrivateKey), v))
	})
}

// TlsCertCAPrivateKeyIsNil applies the IsNil predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTlsCertCAPrivateKey)))
	})
}

// TlsCertCAPrivateKeyNotNil applies the NotNil predicate on the "tlsCertCAPrivateKey" field.
func TlsCertCAPrivateKeyNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTlsCertCAPrivateKey)))
	})
}

// TlsCertCACertEQ applies the EQ predicate on the "tlsCertCACert" field.
func TlsCertCACertEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTlsCertCACert), v))
	})
}

// TlsCertCACertNEQ applies the NEQ predicate on the "tlsCertCACert" field.
func TlsCertCACertNEQ(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTlsCertCACert), v))
	})
}

// TlsCertCACertIn applies the In predicate on the "tlsCertCACert" field.
func TlsCertCACertIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTlsCertCACert), v...))
	})
}

// TlsCertCACertNotIn applies the NotIn predicate on the "tlsCertCACert" field.
func TlsCertCACertNotIn(vs ...[]byte) predicate.Tenant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tenant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTlsCertCACert), v...))
	})
}

// TlsCertCACertGT applies the GT predicate on the "tlsCertCACert" field.
func TlsCertCACertGT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTlsCertCACert), v))
	})
}

// TlsCertCACertGTE applies the GTE predicate on the "tlsCertCACert" field.
func TlsCertCACertGTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTlsCertCACert), v))
	})
}

// TlsCertCACertLT applies the LT predicate on the "tlsCertCACert" field.
func TlsCertCACertLT(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTlsCertCACert), v))
	})
}

// TlsCertCACertLTE applies the LTE predicate on the "tlsCertCACert" field.
func TlsCertCACertLTE(v []byte) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTlsCertCACert), v))
	})
}

// TlsCertCACertIsNil applies the IsNil predicate on the "tlsCertCACert" field.
func TlsCertCACertIsNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTlsCertCACert)))
	})
}

// TlsCertCACertNotNil applies the NotNil predicate on the "tlsCertCACert" field.
func TlsCertCACertNotNil() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTlsCertCACert)))
	})
}

// HasChaincodes applies the HasEdge predicate on the "chaincodes" edge.
func HasChaincodes() predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaincodesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaincodesTable, ChaincodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChaincodesWith applies the HasEdge predicate on the "chaincodes" edge with a given conditions (other predicates).
func HasChaincodesWith(preds ...predicate.Chaincode) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChaincodesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChaincodesTable, ChaincodesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tenant) predicate.Tenant {
	return predicate.Tenant(func(s *sql.Selector) {
		p(s.Not())
	})
}
