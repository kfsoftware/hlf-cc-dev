// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/kfsoftware/hlf-cc-dev/ent/chaincode"
	"github.com/kfsoftware/hlf-cc-dev/ent/predicate"
	"github.com/kfsoftware/hlf-cc-dev/ent/tenant"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChaincode = "Chaincode"
	TypeTenant    = "Tenant"
)

// ChaincodeMutation represents an operation that mutates the Chaincode nodes in the graph.
type ChaincodeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	packageId     *string
	channelId     *string
	clearedFields map[string]struct{}
	tenant        *int
	clearedtenant bool
	done          bool
	oldValue      func(context.Context) (*Chaincode, error)
	predicates    []predicate.Chaincode
}

var _ ent.Mutation = (*ChaincodeMutation)(nil)

// chaincodeOption allows management of the mutation configuration using functional options.
type chaincodeOption func(*ChaincodeMutation)

// newChaincodeMutation creates new mutation for the Chaincode entity.
func newChaincodeMutation(c config, op Op, opts ...chaincodeOption) *ChaincodeMutation {
	m := &ChaincodeMutation{
		config:        c,
		op:            op,
		typ:           TypeChaincode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChaincodeID sets the ID field of the mutation.
func withChaincodeID(id int) chaincodeOption {
	return func(m *ChaincodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Chaincode
		)
		m.oldValue = func(ctx context.Context) (*Chaincode, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chaincode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChaincode sets the old Chaincode of the mutation.
func withChaincode(node *Chaincode) chaincodeOption {
	return func(m *ChaincodeMutation) {
		m.oldValue = func(context.Context) (*Chaincode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChaincodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChaincodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChaincodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPackageId sets the "packageId" field.
func (m *ChaincodeMutation) SetPackageId(s string) {
	m.packageId = &s
}

// PackageId returns the value of the "packageId" field in the mutation.
func (m *ChaincodeMutation) PackageId() (r string, exists bool) {
	v := m.packageId
	if v == nil {
		return
	}
	return *v, true
}

// OldPackageId returns the old "packageId" field's value of the Chaincode entity.
// If the Chaincode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChaincodeMutation) OldPackageId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPackageId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPackageId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPackageId: %w", err)
	}
	return oldValue.PackageId, nil
}

// ResetPackageId resets all changes to the "packageId" field.
func (m *ChaincodeMutation) ResetPackageId() {
	m.packageId = nil
}

// SetChannelId sets the "channelId" field.
func (m *ChaincodeMutation) SetChannelId(s string) {
	m.channelId = &s
}

// ChannelId returns the value of the "channelId" field in the mutation.
func (m *ChaincodeMutation) ChannelId() (r string, exists bool) {
	v := m.channelId
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelId returns the old "channelId" field's value of the Chaincode entity.
// If the Chaincode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChaincodeMutation) OldChannelId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChannelId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChannelId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelId: %w", err)
	}
	return oldValue.ChannelId, nil
}

// ResetChannelId resets all changes to the "channelId" field.
func (m *ChaincodeMutation) ResetChannelId() {
	m.channelId = nil
}

// SetTenantID sets the "tenant" edge to the Tenant entity by id.
func (m *ChaincodeMutation) SetTenantID(id int) {
	m.tenant = &id
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (m *ChaincodeMutation) ClearTenant() {
	m.clearedtenant = true
}

// TenantCleared reports if the "tenant" edge to the Tenant entity was cleared.
func (m *ChaincodeMutation) TenantCleared() bool {
	return m.clearedtenant
}

// TenantID returns the "tenant" edge ID in the mutation.
func (m *ChaincodeMutation) TenantID() (id int, exists bool) {
	if m.tenant != nil {
		return *m.tenant, true
	}
	return
}

// TenantIDs returns the "tenant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TenantID instead. It exists only for internal usage by the builders.
func (m *ChaincodeMutation) TenantIDs() (ids []int) {
	if id := m.tenant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTenant resets all changes to the "tenant" edge.
func (m *ChaincodeMutation) ResetTenant() {
	m.tenant = nil
	m.clearedtenant = false
}

// Where appends a list predicates to the ChaincodeMutation builder.
func (m *ChaincodeMutation) Where(ps ...predicate.Chaincode) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChaincodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Chaincode).
func (m *ChaincodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChaincodeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.packageId != nil {
		fields = append(fields, chaincode.FieldPackageId)
	}
	if m.channelId != nil {
		fields = append(fields, chaincode.FieldChannelId)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChaincodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chaincode.FieldPackageId:
		return m.PackageId()
	case chaincode.FieldChannelId:
		return m.ChannelId()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChaincodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chaincode.FieldPackageId:
		return m.OldPackageId(ctx)
	case chaincode.FieldChannelId:
		return m.OldChannelId(ctx)
	}
	return nil, fmt.Errorf("unknown Chaincode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChaincodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chaincode.FieldPackageId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPackageId(v)
		return nil
	case chaincode.FieldChannelId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelId(v)
		return nil
	}
	return fmt.Errorf("unknown Chaincode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChaincodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChaincodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChaincodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chaincode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChaincodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChaincodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChaincodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chaincode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChaincodeMutation) ResetField(name string) error {
	switch name {
	case chaincode.FieldPackageId:
		m.ResetPackageId()
		return nil
	case chaincode.FieldChannelId:
		m.ResetChannelId()
		return nil
	}
	return fmt.Errorf("unknown Chaincode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChaincodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tenant != nil {
		edges = append(edges, chaincode.EdgeTenant)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChaincodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chaincode.EdgeTenant:
		if id := m.tenant; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChaincodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChaincodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChaincodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtenant {
		edges = append(edges, chaincode.EdgeTenant)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChaincodeMutation) EdgeCleared(name string) bool {
	switch name {
	case chaincode.EdgeTenant:
		return m.clearedtenant
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChaincodeMutation) ClearEdge(name string) error {
	switch name {
	case chaincode.EdgeTenant:
		m.ClearTenant()
		return nil
	}
	return fmt.Errorf("unknown Chaincode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChaincodeMutation) ResetEdge(name string) error {
	switch name {
	case chaincode.EdgeTenant:
		m.ResetTenant()
		return nil
	}
	return fmt.Errorf("unknown Chaincode edge %s", name)
}

// TenantMutation represents an operation that mutates the Tenant nodes in the graph.
type TenantMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	name                 *string
	mspId                *string
	signCertCAPrivateKey *[]byte
	signCertCACert       *[]byte
	tlsCertCAPrivateKey  *[]byte
	tlsCertCACert        *[]byte
	clearedFields        map[string]struct{}
	chaincodes           map[int]struct{}
	removedchaincodes    map[int]struct{}
	clearedchaincodes    bool
	done                 bool
	oldValue             func(context.Context) (*Tenant, error)
	predicates           []predicate.Tenant
}

var _ ent.Mutation = (*TenantMutation)(nil)

// tenantOption allows management of the mutation configuration using functional options.
type tenantOption func(*TenantMutation)

// newTenantMutation creates new mutation for the Tenant entity.
func newTenantMutation(c config, op Op, opts ...tenantOption) *TenantMutation {
	m := &TenantMutation{
		config:        c,
		op:            op,
		typ:           TypeTenant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTenantID sets the ID field of the mutation.
func withTenantID(id int) tenantOption {
	return func(m *TenantMutation) {
		var (
			err   error
			once  sync.Once
			value *Tenant
		)
		m.oldValue = func(ctx context.Context) (*Tenant, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tenant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTenant sets the old Tenant of the mutation.
func withTenant(node *Tenant) tenantOption {
	return func(m *TenantMutation) {
		m.oldValue = func(context.Context) (*Tenant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TenantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TenantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TenantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *TenantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TenantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TenantMutation) ResetName() {
	m.name = nil
}

// SetMspId sets the "mspId" field.
func (m *TenantMutation) SetMspId(s string) {
	m.mspId = &s
}

// MspId returns the value of the "mspId" field in the mutation.
func (m *TenantMutation) MspId() (r string, exists bool) {
	v := m.mspId
	if v == nil {
		return
	}
	return *v, true
}

// OldMspId returns the old "mspId" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldMspId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMspId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMspId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMspId: %w", err)
	}
	return oldValue.MspId, nil
}

// ResetMspId resets all changes to the "mspId" field.
func (m *TenantMutation) ResetMspId() {
	m.mspId = nil
}

// SetSignCertCAPrivateKey sets the "signCertCAPrivateKey" field.
func (m *TenantMutation) SetSignCertCAPrivateKey(b []byte) {
	m.signCertCAPrivateKey = &b
}

// SignCertCAPrivateKey returns the value of the "signCertCAPrivateKey" field in the mutation.
func (m *TenantMutation) SignCertCAPrivateKey() (r []byte, exists bool) {
	v := m.signCertCAPrivateKey
	if v == nil {
		return
	}
	return *v, true
}

// OldSignCertCAPrivateKey returns the old "signCertCAPrivateKey" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldSignCertCAPrivateKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSignCertCAPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSignCertCAPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignCertCAPrivateKey: %w", err)
	}
	return oldValue.SignCertCAPrivateKey, nil
}

// ClearSignCertCAPrivateKey clears the value of the "signCertCAPrivateKey" field.
func (m *TenantMutation) ClearSignCertCAPrivateKey() {
	m.signCertCAPrivateKey = nil
	m.clearedFields[tenant.FieldSignCertCAPrivateKey] = struct{}{}
}

// SignCertCAPrivateKeyCleared returns if the "signCertCAPrivateKey" field was cleared in this mutation.
func (m *TenantMutation) SignCertCAPrivateKeyCleared() bool {
	_, ok := m.clearedFields[tenant.FieldSignCertCAPrivateKey]
	return ok
}

// ResetSignCertCAPrivateKey resets all changes to the "signCertCAPrivateKey" field.
func (m *TenantMutation) ResetSignCertCAPrivateKey() {
	m.signCertCAPrivateKey = nil
	delete(m.clearedFields, tenant.FieldSignCertCAPrivateKey)
}

// SetSignCertCACert sets the "signCertCACert" field.
func (m *TenantMutation) SetSignCertCACert(b []byte) {
	m.signCertCACert = &b
}

// SignCertCACert returns the value of the "signCertCACert" field in the mutation.
func (m *TenantMutation) SignCertCACert() (r []byte, exists bool) {
	v := m.signCertCACert
	if v == nil {
		return
	}
	return *v, true
}

// OldSignCertCACert returns the old "signCertCACert" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldSignCertCACert(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSignCertCACert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSignCertCACert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignCertCACert: %w", err)
	}
	return oldValue.SignCertCACert, nil
}

// ClearSignCertCACert clears the value of the "signCertCACert" field.
func (m *TenantMutation) ClearSignCertCACert() {
	m.signCertCACert = nil
	m.clearedFields[tenant.FieldSignCertCACert] = struct{}{}
}

// SignCertCACertCleared returns if the "signCertCACert" field was cleared in this mutation.
func (m *TenantMutation) SignCertCACertCleared() bool {
	_, ok := m.clearedFields[tenant.FieldSignCertCACert]
	return ok
}

// ResetSignCertCACert resets all changes to the "signCertCACert" field.
func (m *TenantMutation) ResetSignCertCACert() {
	m.signCertCACert = nil
	delete(m.clearedFields, tenant.FieldSignCertCACert)
}

// SetTlsCertCAPrivateKey sets the "tlsCertCAPrivateKey" field.
func (m *TenantMutation) SetTlsCertCAPrivateKey(b []byte) {
	m.tlsCertCAPrivateKey = &b
}

// TlsCertCAPrivateKey returns the value of the "tlsCertCAPrivateKey" field in the mutation.
func (m *TenantMutation) TlsCertCAPrivateKey() (r []byte, exists bool) {
	v := m.tlsCertCAPrivateKey
	if v == nil {
		return
	}
	return *v, true
}

// OldTlsCertCAPrivateKey returns the old "tlsCertCAPrivateKey" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldTlsCertCAPrivateKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTlsCertCAPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTlsCertCAPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTlsCertCAPrivateKey: %w", err)
	}
	return oldValue.TlsCertCAPrivateKey, nil
}

// ClearTlsCertCAPrivateKey clears the value of the "tlsCertCAPrivateKey" field.
func (m *TenantMutation) ClearTlsCertCAPrivateKey() {
	m.tlsCertCAPrivateKey = nil
	m.clearedFields[tenant.FieldTlsCertCAPrivateKey] = struct{}{}
}

// TlsCertCAPrivateKeyCleared returns if the "tlsCertCAPrivateKey" field was cleared in this mutation.
func (m *TenantMutation) TlsCertCAPrivateKeyCleared() bool {
	_, ok := m.clearedFields[tenant.FieldTlsCertCAPrivateKey]
	return ok
}

// ResetTlsCertCAPrivateKey resets all changes to the "tlsCertCAPrivateKey" field.
func (m *TenantMutation) ResetTlsCertCAPrivateKey() {
	m.tlsCertCAPrivateKey = nil
	delete(m.clearedFields, tenant.FieldTlsCertCAPrivateKey)
}

// SetTlsCertCACert sets the "tlsCertCACert" field.
func (m *TenantMutation) SetTlsCertCACert(b []byte) {
	m.tlsCertCACert = &b
}

// TlsCertCACert returns the value of the "tlsCertCACert" field in the mutation.
func (m *TenantMutation) TlsCertCACert() (r []byte, exists bool) {
	v := m.tlsCertCACert
	if v == nil {
		return
	}
	return *v, true
}

// OldTlsCertCACert returns the old "tlsCertCACert" field's value of the Tenant entity.
// If the Tenant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TenantMutation) OldTlsCertCACert(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTlsCertCACert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTlsCertCACert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTlsCertCACert: %w", err)
	}
	return oldValue.TlsCertCACert, nil
}

// ClearTlsCertCACert clears the value of the "tlsCertCACert" field.
func (m *TenantMutation) ClearTlsCertCACert() {
	m.tlsCertCACert = nil
	m.clearedFields[tenant.FieldTlsCertCACert] = struct{}{}
}

// TlsCertCACertCleared returns if the "tlsCertCACert" field was cleared in this mutation.
func (m *TenantMutation) TlsCertCACertCleared() bool {
	_, ok := m.clearedFields[tenant.FieldTlsCertCACert]
	return ok
}

// ResetTlsCertCACert resets all changes to the "tlsCertCACert" field.
func (m *TenantMutation) ResetTlsCertCACert() {
	m.tlsCertCACert = nil
	delete(m.clearedFields, tenant.FieldTlsCertCACert)
}

// AddChaincodeIDs adds the "chaincodes" edge to the Chaincode entity by ids.
func (m *TenantMutation) AddChaincodeIDs(ids ...int) {
	if m.chaincodes == nil {
		m.chaincodes = make(map[int]struct{})
	}
	for i := range ids {
		m.chaincodes[ids[i]] = struct{}{}
	}
}

// ClearChaincodes clears the "chaincodes" edge to the Chaincode entity.
func (m *TenantMutation) ClearChaincodes() {
	m.clearedchaincodes = true
}

// ChaincodesCleared reports if the "chaincodes" edge to the Chaincode entity was cleared.
func (m *TenantMutation) ChaincodesCleared() bool {
	return m.clearedchaincodes
}

// RemoveChaincodeIDs removes the "chaincodes" edge to the Chaincode entity by IDs.
func (m *TenantMutation) RemoveChaincodeIDs(ids ...int) {
	if m.removedchaincodes == nil {
		m.removedchaincodes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.chaincodes, ids[i])
		m.removedchaincodes[ids[i]] = struct{}{}
	}
}

// RemovedChaincodes returns the removed IDs of the "chaincodes" edge to the Chaincode entity.
func (m *TenantMutation) RemovedChaincodesIDs() (ids []int) {
	for id := range m.removedchaincodes {
		ids = append(ids, id)
	}
	return
}

// ChaincodesIDs returns the "chaincodes" edge IDs in the mutation.
func (m *TenantMutation) ChaincodesIDs() (ids []int) {
	for id := range m.chaincodes {
		ids = append(ids, id)
	}
	return
}

// ResetChaincodes resets all changes to the "chaincodes" edge.
func (m *TenantMutation) ResetChaincodes() {
	m.chaincodes = nil
	m.clearedchaincodes = false
	m.removedchaincodes = nil
}

// Where appends a list predicates to the TenantMutation builder.
func (m *TenantMutation) Where(ps ...predicate.Tenant) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TenantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tenant).
func (m *TenantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TenantMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, tenant.FieldName)
	}
	if m.mspId != nil {
		fields = append(fields, tenant.FieldMspId)
	}
	if m.signCertCAPrivateKey != nil {
		fields = append(fields, tenant.FieldSignCertCAPrivateKey)
	}
	if m.signCertCACert != nil {
		fields = append(fields, tenant.FieldSignCertCACert)
	}
	if m.tlsCertCAPrivateKey != nil {
		fields = append(fields, tenant.FieldTlsCertCAPrivateKey)
	}
	if m.tlsCertCACert != nil {
		fields = append(fields, tenant.FieldTlsCertCACert)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TenantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tenant.FieldName:
		return m.Name()
	case tenant.FieldMspId:
		return m.MspId()
	case tenant.FieldSignCertCAPrivateKey:
		return m.SignCertCAPrivateKey()
	case tenant.FieldSignCertCACert:
		return m.SignCertCACert()
	case tenant.FieldTlsCertCAPrivateKey:
		return m.TlsCertCAPrivateKey()
	case tenant.FieldTlsCertCACert:
		return m.TlsCertCACert()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TenantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tenant.FieldName:
		return m.OldName(ctx)
	case tenant.FieldMspId:
		return m.OldMspId(ctx)
	case tenant.FieldSignCertCAPrivateKey:
		return m.OldSignCertCAPrivateKey(ctx)
	case tenant.FieldSignCertCACert:
		return m.OldSignCertCACert(ctx)
	case tenant.FieldTlsCertCAPrivateKey:
		return m.OldTlsCertCAPrivateKey(ctx)
	case tenant.FieldTlsCertCACert:
		return m.OldTlsCertCACert(ctx)
	}
	return nil, fmt.Errorf("unknown Tenant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tenant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tenant.FieldMspId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMspId(v)
		return nil
	case tenant.FieldSignCertCAPrivateKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignCertCAPrivateKey(v)
		return nil
	case tenant.FieldSignCertCACert:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignCertCACert(v)
		return nil
	case tenant.FieldTlsCertCAPrivateKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTlsCertCAPrivateKey(v)
		return nil
	case tenant.FieldTlsCertCACert:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTlsCertCACert(v)
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TenantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TenantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TenantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tenant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TenantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tenant.FieldSignCertCAPrivateKey) {
		fields = append(fields, tenant.FieldSignCertCAPrivateKey)
	}
	if m.FieldCleared(tenant.FieldSignCertCACert) {
		fields = append(fields, tenant.FieldSignCertCACert)
	}
	if m.FieldCleared(tenant.FieldTlsCertCAPrivateKey) {
		fields = append(fields, tenant.FieldTlsCertCAPrivateKey)
	}
	if m.FieldCleared(tenant.FieldTlsCertCACert) {
		fields = append(fields, tenant.FieldTlsCertCACert)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TenantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TenantMutation) ClearField(name string) error {
	switch name {
	case tenant.FieldSignCertCAPrivateKey:
		m.ClearSignCertCAPrivateKey()
		return nil
	case tenant.FieldSignCertCACert:
		m.ClearSignCertCACert()
		return nil
	case tenant.FieldTlsCertCAPrivateKey:
		m.ClearTlsCertCAPrivateKey()
		return nil
	case tenant.FieldTlsCertCACert:
		m.ClearTlsCertCACert()
		return nil
	}
	return fmt.Errorf("unknown Tenant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TenantMutation) ResetField(name string) error {
	switch name {
	case tenant.FieldName:
		m.ResetName()
		return nil
	case tenant.FieldMspId:
		m.ResetMspId()
		return nil
	case tenant.FieldSignCertCAPrivateKey:
		m.ResetSignCertCAPrivateKey()
		return nil
	case tenant.FieldSignCertCACert:
		m.ResetSignCertCACert()
		return nil
	case tenant.FieldTlsCertCAPrivateKey:
		m.ResetTlsCertCAPrivateKey()
		return nil
	case tenant.FieldTlsCertCACert:
		m.ResetTlsCertCACert()
		return nil
	}
	return fmt.Errorf("unknown Tenant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TenantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chaincodes != nil {
		edges = append(edges, tenant.EdgeChaincodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TenantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tenant.EdgeChaincodes:
		ids := make([]ent.Value, 0, len(m.chaincodes))
		for id := range m.chaincodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TenantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedchaincodes != nil {
		edges = append(edges, tenant.EdgeChaincodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TenantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tenant.EdgeChaincodes:
		ids := make([]ent.Value, 0, len(m.removedchaincodes))
		for id := range m.removedchaincodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TenantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchaincodes {
		edges = append(edges, tenant.EdgeChaincodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TenantMutation) EdgeCleared(name string) bool {
	switch name {
	case tenant.EdgeChaincodes:
		return m.clearedchaincodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TenantMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tenant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TenantMutation) ResetEdge(name string) error {
	switch name {
	case tenant.EdgeChaincodes:
		m.ResetChaincodes()
		return nil
	}
	return fmt.Errorf("unknown Tenant edge %s", name)
}
