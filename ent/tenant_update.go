// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kfsoftware/hlf-cc-dev/ent/chaincode"
	"github.com/kfsoftware/hlf-cc-dev/ent/predicate"
	"github.com/kfsoftware/hlf-cc-dev/ent/tenant"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetMspId sets the "mspId" field.
func (tu *TenantUpdate) SetMspId(s string) *TenantUpdate {
	tu.mutation.SetMspId(s)
	return tu
}

// SetSignCertCAPrivateKey sets the "signCertCAPrivateKey" field.
func (tu *TenantUpdate) SetSignCertCAPrivateKey(b []byte) *TenantUpdate {
	tu.mutation.SetSignCertCAPrivateKey(b)
	return tu
}

// ClearSignCertCAPrivateKey clears the value of the "signCertCAPrivateKey" field.
func (tu *TenantUpdate) ClearSignCertCAPrivateKey() *TenantUpdate {
	tu.mutation.ClearSignCertCAPrivateKey()
	return tu
}

// SetSignCertCACert sets the "signCertCACert" field.
func (tu *TenantUpdate) SetSignCertCACert(b []byte) *TenantUpdate {
	tu.mutation.SetSignCertCACert(b)
	return tu
}

// ClearSignCertCACert clears the value of the "signCertCACert" field.
func (tu *TenantUpdate) ClearSignCertCACert() *TenantUpdate {
	tu.mutation.ClearSignCertCACert()
	return tu
}

// SetTlsCertCAPrivateKey sets the "tlsCertCAPrivateKey" field.
func (tu *TenantUpdate) SetTlsCertCAPrivateKey(b []byte) *TenantUpdate {
	tu.mutation.SetTlsCertCAPrivateKey(b)
	return tu
}

// ClearTlsCertCAPrivateKey clears the value of the "tlsCertCAPrivateKey" field.
func (tu *TenantUpdate) ClearTlsCertCAPrivateKey() *TenantUpdate {
	tu.mutation.ClearTlsCertCAPrivateKey()
	return tu
}

// SetTlsCertCACert sets the "tlsCertCACert" field.
func (tu *TenantUpdate) SetTlsCertCACert(b []byte) *TenantUpdate {
	tu.mutation.SetTlsCertCACert(b)
	return tu
}

// ClearTlsCertCACert clears the value of the "tlsCertCACert" field.
func (tu *TenantUpdate) ClearTlsCertCACert() *TenantUpdate {
	tu.mutation.ClearTlsCertCACert()
	return tu
}

// AddChaincodeIDs adds the "chaincodes" edge to the Chaincode entity by IDs.
func (tu *TenantUpdate) AddChaincodeIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddChaincodeIDs(ids...)
	return tu
}

// AddChaincodes adds the "chaincodes" edges to the Chaincode entity.
func (tu *TenantUpdate) AddChaincodes(c ...*Chaincode) *TenantUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddChaincodeIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearChaincodes clears all "chaincodes" edges to the Chaincode entity.
func (tu *TenantUpdate) ClearChaincodes() *TenantUpdate {
	tu.mutation.ClearChaincodes()
	return tu
}

// RemoveChaincodeIDs removes the "chaincodes" edge to Chaincode entities by IDs.
func (tu *TenantUpdate) RemoveChaincodeIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveChaincodeIDs(ids...)
	return tu
}

// RemoveChaincodes removes "chaincodes" edges to Chaincode entities.
func (tu *TenantUpdate) RemoveChaincodes(c ...*Chaincode) *TenantUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveChaincodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
	}
	if value, ok := tu.mutation.MspId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldMspId,
		})
	}
	if value, ok := tu.mutation.SignCertCAPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldSignCertCAPrivateKey,
		})
	}
	if tu.mutation.SignCertCAPrivateKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldSignCertCAPrivateKey,
		})
	}
	if value, ok := tu.mutation.SignCertCACert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldSignCertCACert,
		})
	}
	if tu.mutation.SignCertCACertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldSignCertCACert,
		})
	}
	if value, ok := tu.mutation.TlsCertCAPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldTlsCertCAPrivateKey,
		})
	}
	if tu.mutation.TlsCertCAPrivateKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldTlsCertCAPrivateKey,
		})
	}
	if value, ok := tu.mutation.TlsCertCACert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldTlsCertCACert,
		})
	}
	if tu.mutation.TlsCertCACertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldTlsCertCACert,
		})
	}
	if tu.mutation.ChaincodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChaincodesTable,
			Columns: []string{tenant.ChaincodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chaincode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChaincodesIDs(); len(nodes) > 0 && !tu.mutation.ChaincodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChaincodesTable,
			Columns: []string{tenant.ChaincodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chaincode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChaincodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChaincodesTable,
			Columns: []string{tenant.ChaincodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chaincode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetMspId sets the "mspId" field.
func (tuo *TenantUpdateOne) SetMspId(s string) *TenantUpdateOne {
	tuo.mutation.SetMspId(s)
	return tuo
}

// SetSignCertCAPrivateKey sets the "signCertCAPrivateKey" field.
func (tuo *TenantUpdateOne) SetSignCertCAPrivateKey(b []byte) *TenantUpdateOne {
	tuo.mutation.SetSignCertCAPrivateKey(b)
	return tuo
}

// ClearSignCertCAPrivateKey clears the value of the "signCertCAPrivateKey" field.
func (tuo *TenantUpdateOne) ClearSignCertCAPrivateKey() *TenantUpdateOne {
	tuo.mutation.ClearSignCertCAPrivateKey()
	return tuo
}

// SetSignCertCACert sets the "signCertCACert" field.
func (tuo *TenantUpdateOne) SetSignCertCACert(b []byte) *TenantUpdateOne {
	tuo.mutation.SetSignCertCACert(b)
	return tuo
}

// ClearSignCertCACert clears the value of the "signCertCACert" field.
func (tuo *TenantUpdateOne) ClearSignCertCACert() *TenantUpdateOne {
	tuo.mutation.ClearSignCertCACert()
	return tuo
}

// SetTlsCertCAPrivateKey sets the "tlsCertCAPrivateKey" field.
func (tuo *TenantUpdateOne) SetTlsCertCAPrivateKey(b []byte) *TenantUpdateOne {
	tuo.mutation.SetTlsCertCAPrivateKey(b)
	return tuo
}

// ClearTlsCertCAPrivateKey clears the value of the "tlsCertCAPrivateKey" field.
func (tuo *TenantUpdateOne) ClearTlsCertCAPrivateKey() *TenantUpdateOne {
	tuo.mutation.ClearTlsCertCAPrivateKey()
	return tuo
}

// SetTlsCertCACert sets the "tlsCertCACert" field.
func (tuo *TenantUpdateOne) SetTlsCertCACert(b []byte) *TenantUpdateOne {
	tuo.mutation.SetTlsCertCACert(b)
	return tuo
}

// ClearTlsCertCACert clears the value of the "tlsCertCACert" field.
func (tuo *TenantUpdateOne) ClearTlsCertCACert() *TenantUpdateOne {
	tuo.mutation.ClearTlsCertCACert()
	return tuo
}

// AddChaincodeIDs adds the "chaincodes" edge to the Chaincode entity by IDs.
func (tuo *TenantUpdateOne) AddChaincodeIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddChaincodeIDs(ids...)
	return tuo
}

// AddChaincodes adds the "chaincodes" edges to the Chaincode entity.
func (tuo *TenantUpdateOne) AddChaincodes(c ...*Chaincode) *TenantUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddChaincodeIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearChaincodes clears all "chaincodes" edges to the Chaincode entity.
func (tuo *TenantUpdateOne) ClearChaincodes() *TenantUpdateOne {
	tuo.mutation.ClearChaincodes()
	return tuo
}

// RemoveChaincodeIDs removes the "chaincodes" edge to Chaincode entities by IDs.
func (tuo *TenantUpdateOne) RemoveChaincodeIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveChaincodeIDs(ids...)
	return tuo
}

// RemoveChaincodes removes "chaincodes" edges to Chaincode entities.
func (tuo *TenantUpdateOne) RemoveChaincodes(c ...*Chaincode) *TenantUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveChaincodeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Tenant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
	}
	if value, ok := tuo.mutation.MspId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldMspId,
		})
	}
	if value, ok := tuo.mutation.SignCertCAPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldSignCertCAPrivateKey,
		})
	}
	if tuo.mutation.SignCertCAPrivateKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldSignCertCAPrivateKey,
		})
	}
	if value, ok := tuo.mutation.SignCertCACert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldSignCertCACert,
		})
	}
	if tuo.mutation.SignCertCACertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldSignCertCACert,
		})
	}
	if value, ok := tuo.mutation.TlsCertCAPrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldTlsCertCAPrivateKey,
		})
	}
	if tuo.mutation.TlsCertCAPrivateKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldTlsCertCAPrivateKey,
		})
	}
	if value, ok := tuo.mutation.TlsCertCACert(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tenant.FieldTlsCertCACert,
		})
	}
	if tuo.mutation.TlsCertCACertCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tenant.FieldTlsCertCACert,
		})
	}
	if tuo.mutation.ChaincodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChaincodesTable,
			Columns: []string{tenant.ChaincodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chaincode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChaincodesIDs(); len(nodes) > 0 && !tuo.mutation.ChaincodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChaincodesTable,
			Columns: []string{tenant.ChaincodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chaincode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChaincodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ChaincodesTable,
			Columns: []string{tenant.ChaincodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chaincode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
