// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kfsoftware/hlf-cc-dev/ent/chaincode"
	"github.com/kfsoftware/hlf-cc-dev/ent/tenant"
)

// Chaincode is the model entity for the Chaincode schema.
type Chaincode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageId holds the value of the "packageId" field.
	PackageId string `json:"packageId,omitempty"`
	// ChannelId holds the value of the "channelId" field.
	ChannelId string `json:"channelId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChaincodeQuery when eager-loading is set.
	Edges             ChaincodeEdges `json:"edges"`
	tenant_chaincodes *int
}

// ChaincodeEdges holds the relations/edges for other nodes in the graph.
type ChaincodeEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChaincodeEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// The edge tenant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chaincode) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chaincode.FieldID:
			values[i] = new(sql.NullInt64)
		case chaincode.FieldPackageId, chaincode.FieldChannelId:
			values[i] = new(sql.NullString)
		case chaincode.ForeignKeys[0]: // tenant_chaincodes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Chaincode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chaincode fields.
func (c *Chaincode) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chaincode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chaincode.FieldPackageId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field packageId", values[i])
			} else if value.Valid {
				c.PackageId = value.String
			}
		case chaincode.FieldChannelId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channelId", values[i])
			} else if value.Valid {
				c.ChannelId = value.String
			}
		case chaincode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tenant_chaincodes", value)
			} else if value.Valid {
				c.tenant_chaincodes = new(int)
				*c.tenant_chaincodes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Chaincode entity.
func (c *Chaincode) QueryTenant() *TenantQuery {
	return (&ChaincodeClient{config: c.config}).QueryTenant(c)
}

// Update returns a builder for updating this Chaincode.
// Note that you need to call Chaincode.Unwrap() before calling this method if this Chaincode
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chaincode) Update() *ChaincodeUpdateOne {
	return (&ChaincodeClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Chaincode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chaincode) Unwrap() *Chaincode {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chaincode is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chaincode) String() string {
	var builder strings.Builder
	builder.WriteString("Chaincode(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", packageId=")
	builder.WriteString(c.PackageId)
	builder.WriteString(", channelId=")
	builder.WriteString(c.ChannelId)
	builder.WriteByte(')')
	return builder.String()
}

// Chaincodes is a parsable slice of Chaincode.
type Chaincodes []*Chaincode

func (c Chaincodes) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
