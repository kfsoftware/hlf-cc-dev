// Code generated by entc, DO NOT EDIT.

package chaincode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kfsoftware/hlf-cc-dev/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PackageId applies equality check predicate on the "packageId" field. It's identical to PackageIdEQ.
func PackageId(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageId), v))
	})
}

// ChannelId applies equality check predicate on the "channelId" field. It's identical to ChannelIdEQ.
func ChannelId(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelId), v))
	})
}

// PackageIdEQ applies the EQ predicate on the "packageId" field.
func PackageIdEQ(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPackageId), v))
	})
}

// PackageIdNEQ applies the NEQ predicate on the "packageId" field.
func PackageIdNEQ(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPackageId), v))
	})
}

// PackageIdIn applies the In predicate on the "packageId" field.
func PackageIdIn(vs ...string) predicate.Chaincode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chaincode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPackageId), v...))
	})
}

// PackageIdNotIn applies the NotIn predicate on the "packageId" field.
func PackageIdNotIn(vs ...string) predicate.Chaincode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chaincode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPackageId), v...))
	})
}

// PackageIdGT applies the GT predicate on the "packageId" field.
func PackageIdGT(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPackageId), v))
	})
}

// PackageIdGTE applies the GTE predicate on the "packageId" field.
func PackageIdGTE(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPackageId), v))
	})
}

// PackageIdLT applies the LT predicate on the "packageId" field.
func PackageIdLT(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPackageId), v))
	})
}

// PackageIdLTE applies the LTE predicate on the "packageId" field.
func PackageIdLTE(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPackageId), v))
	})
}

// PackageIdContains applies the Contains predicate on the "packageId" field.
func PackageIdContains(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPackageId), v))
	})
}

// PackageIdHasPrefix applies the HasPrefix predicate on the "packageId" field.
func PackageIdHasPrefix(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPackageId), v))
	})
}

// PackageIdHasSuffix applies the HasSuffix predicate on the "packageId" field.
func PackageIdHasSuffix(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPackageId), v))
	})
}

// PackageIdEqualFold applies the EqualFold predicate on the "packageId" field.
func PackageIdEqualFold(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPackageId), v))
	})
}

// PackageIdContainsFold applies the ContainsFold predicate on the "packageId" field.
func PackageIdContainsFold(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPackageId), v))
	})
}

// ChannelIdEQ applies the EQ predicate on the "channelId" field.
func ChannelIdEQ(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannelId), v))
	})
}

// ChannelIdNEQ applies the NEQ predicate on the "channelId" field.
func ChannelIdNEQ(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannelId), v))
	})
}

// ChannelIdIn applies the In predicate on the "channelId" field.
func ChannelIdIn(vs ...string) predicate.Chaincode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chaincode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChannelId), v...))
	})
}

// ChannelIdNotIn applies the NotIn predicate on the "channelId" field.
func ChannelIdNotIn(vs ...string) predicate.Chaincode {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chaincode(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChannelId), v...))
	})
}

// ChannelIdGT applies the GT predicate on the "channelId" field.
func ChannelIdGT(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChannelId), v))
	})
}

// ChannelIdGTE applies the GTE predicate on the "channelId" field.
func ChannelIdGTE(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChannelId), v))
	})
}

// ChannelIdLT applies the LT predicate on the "channelId" field.
func ChannelIdLT(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChannelId), v))
	})
}

// ChannelIdLTE applies the LTE predicate on the "channelId" field.
func ChannelIdLTE(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChannelId), v))
	})
}

// ChannelIdContains applies the Contains predicate on the "channelId" field.
func ChannelIdContains(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChannelId), v))
	})
}

// ChannelIdHasPrefix applies the HasPrefix predicate on the "channelId" field.
func ChannelIdHasPrefix(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChannelId), v))
	})
}

// ChannelIdHasSuffix applies the HasSuffix predicate on the "channelId" field.
func ChannelIdHasSuffix(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChannelId), v))
	})
}

// ChannelIdEqualFold applies the EqualFold predicate on the "channelId" field.
func ChannelIdEqualFold(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChannelId), v))
	})
}

// ChannelIdContainsFold applies the ContainsFold predicate on the "channelId" field.
func ChannelIdContainsFold(v string) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChannelId), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chaincode) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chaincode) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chaincode) predicate.Chaincode {
	return predicate.Chaincode(func(s *sql.Selector) {
		p(s.Not())
	})
}
